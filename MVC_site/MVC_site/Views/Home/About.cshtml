@{
    ViewBag.Title = "About";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<p>
    <h4>Models</h4>
    Model objects are the parts of the application that implement the logic for the application's data domain. Often, model objects retrieve and store model state in a database. For example, a Product object might retrieve information from a database, operate on it, and then write updated information back to a Products table in a SQL Server database.
    Views
</p>
<p>
    <h4>Views </h4>
    Are the components that display the application's user interface (UI). Typically, this UI is created from the model data. An example would be an edit view of a Products table that displays text boxes, drop-down lists, and check boxes based on the current state of a Product object.
    Controllers
</p>
<p>
    <h4>Controllers</h4>
    Are the components that handle user interaction, work with the model, and ultimately select a view to render that displays UI. In an MVC application, the view only displays information; the controller handles and responds to user input and interaction. For example, the controller handles query-string values, and passes these values to the model, which in turn might use these values to query the database.
</p>
<p>
    <h4>Conclusion</h4>
    If you want to change smth, or add some excelent state-of-the-art thing, you should add new model,
    that will be a link between View and Controller(ofc, U should create them too). 
    Then, open console, make migrations and update your database. All of this is avalible in VS community.
</p>
